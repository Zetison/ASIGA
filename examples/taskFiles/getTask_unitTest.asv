function studies = getTask_unitTest()


counter = 1;
studies = cell(0,1);
getDefaultTaskValues

misc.scatteringCase = 'BI'; % 'BI' = Bistatic scattering, 'MS' = Monostatic scattering
misc.model = 'S1';
varCol = setS1Parameters();
noCoresToUse = 4;
msh.explodeNURBS = false;   % Create patches from all C^0 interfaces

msh.meshFile = 'createNURBSmesh_EL';
msh.parm = 1;
misc.checkNURBSweightsCompatibility = 0;
prePlot.plotGeometryInfo    = 0;       % Plot domain boundaries (i.e. Gamma, Gamma_a, Neumann, Dirichlet, ...)
err.calculateVolumeError    = true;

prePlot.plotFullDomain   = false;        % Plot volumetric domains
prePlot.view             = [0,90];
prePlot.plotSubsets      = {'xy'};
% prePlot.plotSubsets      = {};
prePlot.plot3Dgeometry = 0;
prePlot.plot2Dgeometry = 0;
prePlot.plotControlPolygon = 0;       % Plot the control polygon for the NURBS mesh
prePlot.abortAfterPlotting = true;       % Abort simulation after pre plotting
% prePlot.colorFun = @(v) abs(norm2(v)-(r_a+t_PML));
prePlot.resolution = [20,20,0];
warning('off','NURBS:weights')

postPlot = [];

msh.meshFile = 'createNURBSmesh_EL';
% msh.Xi = [0,0,0,1,1,2,2,3,3,3]/3;
msh.Xi = [0,0,0,1,1,2,2,3,3,4,4,4]/4;
msh.refineThetaOnly = false;

connectedParameters = {{'misc.method','misc.formulation'},{'pml.sigmaType','pml.n'}};
% misc.method = {'PML','IE'};
% misc.formulation = {'GSB','BGU'};
misc.method = {'PML'};
misc.formulation = {'GSB'};
misc.coreMethod = {'IGA'};

msh.M = 1; % 4
misc.omega = 1000;
misc.BC = 'SHBC';
msh.degree = 2;

misc.r_a = varCol{1}.R_i;
% misc.r_a = 1.2*varCol{1}.R_i;
varCol{1}.refinement = @(M) [2^(M+1)-1, 2^(M+1)-1, 2^(M+1)-1, 2^(M-1)-1];
% varCol{1}.refinement = @(M) [2^(M+1)-1, 2^(M+1)-1, 2^(M+1)-1, 2^(M+1)-1];
ffp.alpha_s = 0; % This is incorrectly set to pi in the paper
ffp.beta_s = 0;
ffp.r = R;
ffp.alpha = linspace(0,2*pi,1000);
ffp.beta = 0;

para.plotResultsInParaview = 0;
ffp.calculateFarFieldPattern = 1;
ffp.plotFarField = false;     % If false, plots the near field instead
err.calculateVolumeError = 0;
err.calculateSurfaceError = 0;
loopParameters = {'msh.M','msh.degree','pml.sigmaType','misc.method','misc.coreMethod','misc.omega'};

pml.sigmaType = [2,5,3];   	% sigmaType = 1: sigma(xi) = xi*exp(gamma*xi), sigmaType = 2: sigma(xi) = C*xi^n, sigmaType = 3: sigma(xi) = C/(1-xi)^n
pml.n = [2,2,1];
% pml.sigmaType = 3;  
% pml.n = 1;
collectIntoTasks



